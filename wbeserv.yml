    struct addrinfo hints, *res, *p;
    int getaddr = getaddrinfo("127.0.0.1", "http", &hints, &res);
    if (getaddr != 0)
        std::cout << "error" << std::endl;
        
    void *addr;
    struct sockaddr_in* ipv4 = (struct sockaddr_in*)res->ai_addr;
    uint32_t ip = htonl(ipv4->sin_addr.s_addr);
    
    std::cout << inet_addr_pton(ip) << std::endl;


    const char* inet_addr_pton(uint32_t ipv)
{
    char* ip = new char[16];
    std::stringstream ss;
    ss << ((int)(ipv >> 24) & 0XFF) << "." << ((int)(ipv >> 16) & 0XFF) << "." << ((int)(ipv >> 8) & 0XFF) << "." << ((int)(ipv) & 0XFF);
    int i = -1;
    while (++i < ss.str().size())
        ip[i] = ss.str().c_str()[i];
    ip[i] = '\0';
    return (ip);
}


        // try
        // {
        //     srv.up();
        // }
        // catch(std::exception const &e)
        // {
        //     std::cout << e.what() << std::endl;
        // }
        
        // while (1)
        // {
        //     sock_t client = srv.accept();
        //     if (client > 0)
        //     {
        //         Client cl(client);
        //         srv.request(cl);
        //     }
        // }



                   char http[2048];
                            int rd = recv(client->getFd(), http, sizeof(http), 0);
                            http[rd] = '\0';
                            std::cout << http;
                            std::string response = "HTTP/1.1 200 OK\r\n";
                            response += "Date: Mon, 27 Jul 2009 12:28:53 GMT";
                            response += "Server: Apache/2.2.14 (Win32)\r\n";
                            response += "Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT\r\n";
                            response += "Content-Length: 88\r\n";
                            response += "Content-Type: text/html\r\n";
                            response += "Connection: keep-alive\r\n";
                            response += "\r\n";
                            response += "<html><head><link rel='icon' href='data:,'></head><body><h1>Hello, World!</h1></body></html>";
                            int r = send(client->getFd(), response.c_str(), response.size(), 0);
                            std::cout << "r = " << r << std::endl;
                            mgn.rm_r(client->getFd());
                            close(client->getFd());
                            server->removeClient(client->getFd());